<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


    <material name="white">
        <color rgba="1 1 1 1"/> 
    </material>

    <material name="orange">
        <color rgba="1 0.3 0.1 1"/>
    </material>

    <material name="blue">
        <color rgba="0.2 0.2 1 1"/>
    </material>

    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>

    <link name="base_link">
    </link>

    <xacro:property name="robot_radius" value="0.2" />
    <xacro:property name="robot_height" value="0.5" />
    <xacro:property name="anchor_robot_radius" value="0.01" />
    <xacro:property name="anchor_robot_length" value="0.1" />
    <xacro:property name="anchor_robot_length_offset" value="0.02" />
    <xacro:property name="anchor_radius" value="0.01" />
    <xacro:property name="anchor_length" value="0.1" />
    <xacro:property name="anchor_length_offset" value="0.02" />
    <xacro:property name="attach_height" value="0.3" />
    <xacro:property name="min_cable_length" value="0" />
    <xacro:property name="max_cable_length" value="0.5" />
    <xacro:property name="PI" value="3.14159265" />
    <xacro:property name="DAMPING" value="0.0001" />
    <xacro:property name="OFFSET" value="0.0001" />
    <xacro:property name="virtual_mass" value="0.0001" />
    <xacro:property name="virtual_anchor_mass" value="0.0001" />

    <xacro:property name="mesh_dir" value="$(find discower_transportation)/description/meshes"/>

    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="load"/>
        <origin xyz="0 0 0"/>
    </joint> 

    <!-- ====== LOAD ====== -->
    <link name="load">
        <visual>
                <origin xyz="0 0 0" rpy="0 0 -${PI/2}" />
            <geometry>                
                <mesh filename="${mesh_dir}/proto.dae"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 ${robot_height/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${robot_radius-OFFSET}" length="${robot_height}" />
            </geometry>
        </collision>
        <inertial>
            <origin xyz="0 0 ${robot_height/2}" rpy="0 0 0"/>
            <mass value="18.3"/>
            <inertia ixx="0.1"  ixy="0"  ixz="0" iyy="0.1" iyz="0" izz="0.41" />
        </inertial> 
    </link>

    <!-- ====== ROBOT 1 ====== -->
    <link name="anchor1">
        <visual>
                <origin xyz="0 0 ${anchor_length/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${anchor_radius}" length="${anchor_length}" />
            </geometry>
            <material name="black"/>
        </visual>
        <inertial>
            <origin xyz="0 0 ${anchor_length/2}" rpy="0 0 0"/>
            <mass value="${virtual_anchor_mass}"/>
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial> 
    </link>
    
    <joint name="load1_joint" type="continuous">
        <parent link="load"/>
        <child link="anchor1"/>
        <origin xyz="0 ${robot_radius} ${attach_height}" rpy="-${PI/2} 0 0"/>
        <axis xyz="0 1 0" />
        <dynamics damping="0.0001" friction="0.0001"/> 
    </joint> 

    <link name="anchor_robot1">
        <visual>
                <origin xyz="0 0 -${anchor_robot_length/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${anchor_robot_radius}" length="${anchor_robot_length}" />
            </geometry>
            <material name="black"/>
        </visual>
        <inertial>
            <origin xyz="0 0 -${anchor_robot_length/2}" rpy="0 0 0"/>
            <mass value="${virtual_anchor_mass}"/>
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial> 
    </link>

    <joint name="anchor1_joint" type="prismatic">
        <parent link="anchor1"/>
        <child link="anchor_robot1"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <axis xyz="0 0 1" />
        <limit lower="${min_cable_length}" upper = "${max_cable_length}" velocity = "100" effort = "100"/>
        <dynamics damping="${DAMPING}" friction="0.0001"/> 
    </joint> 


    <link name="inertia_robot1">
        <visual>
                <origin xyz="0 ${robot_radius} ${-attach_height}" rpy="0 0 0" />
            <geometry>
                <mesh filename="${mesh_dir}/alpha.dae"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 ${robot_radius} ${-attach_height+robot_height/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${robot_radius}" length="${robot_height}" />
            </geometry>
        </collision>
        <inertial>
            <origin xyz="0 ${robot_radius} ${-attach_height+robot_height/2}" rpy="0 0 0"/>
            <mass value="14.5"/>
            <inertia ixx="0.1"  ixy="0"  ixz="0" iyy="0.1" iyz="0" izz="0.37" />
        </inertial> 
    </link>

    <joint name="anchor_robot1_joint" type="continuous">
        <parent link="anchor_robot1"/>
        <child link="inertia_robot1"/>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <axis xyz="0 0 1" />
        <dynamics damping="0.0001" friction="0.0001"/> 
    </joint> 

    <link name="robot1">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${virtual_mass}"/>
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial> 
    </link>

    <joint name="offset_robot1" type="prismatic">
        <parent link="inertia_robot1"/>
        <child link="robot1"/>
        <origin xyz="0 ${robot_radius} 0" rpy="0 0 0"/>
        <axis xyz="0 0 1" />
        <limit lower="0" upper = "0.1" velocity = "0.1" effort = "1"/>
        <dynamics damping="0.0001" friction="0.0001"/> 
    </joint> 


    <!-- ====== ROBOT 2 ====== -->
    <link name="anchor2">
        <visual>
                <origin xyz="0 0 -${anchor_length/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${anchor_radius}" length="${anchor_length}" />
            </geometry>
            <material name="black"/>
        </visual>
        <inertial>
            <origin xyz="0 0 -${anchor_length/2}" rpy="0 0 0"/>
            <mass value="${virtual_anchor_mass}"/>
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial> 
    </link>
    
    <joint name="load2_joint" type="continuous">
        <parent link="load"/>
        <child link="anchor2"/>
        <origin xyz="0 -${robot_radius} ${attach_height}" rpy="-${PI/2} 0 0"/>
        <axis xyz="0 1 0" />
        <dynamics damping="0.0001" friction="0.0001"/> 
    </joint> 

    <link name="anchor_robot2">
        <visual>
                <origin xyz="0 0 ${anchor_robot_length/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${anchor_robot_radius}" length="${anchor_robot_length}" />
            </geometry>
            <material name="black"/>
        </visual>
        <inertial>
            <origin xyz="0 0 ${anchor_robot_length/2}" rpy="0 0 0"/>
            <mass value="${virtual_anchor_mass}"/>
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial> 
    </link>

    <joint name="anchor2_joint" type="prismatic">
        <parent link="anchor2"/>
        <child link="anchor_robot2"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <axis xyz="0 0 -1" />
        <limit lower="${min_cable_length}" upper = "${max_cable_length}" velocity = "100" effort = "100"/>
        <dynamics damping="${DAMPING}" friction="0.0001"/> 
    </joint> 

    <link name="inertia_robot2">
        <visual>
                <origin xyz="0 -${robot_radius} ${-attach_height}" rpy="0 0 0" />
            <geometry>
                <mesh filename="${mesh_dir}/alpha.dae"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 -${robot_radius} ${-attach_height+robot_height/2}" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${robot_radius}" length="${robot_height}" />
            </geometry>
        </collision>
        <inertial>
            <origin xyz="0 -${robot_radius} ${-attach_height+robot_height/2}" rpy="0 0 0"/>
            <mass value="14.5"/>
            <inertia ixx="0.1"  ixy="0"  ixz="0" iyy="0.1" iyz="0" izz="0.37" />
        </inertial> 
    </link>

    <joint name="anchor_robot2_joint" type="continuous">
        <parent link="anchor_robot2"/>
        <child link="inertia_robot2"/>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <axis xyz="0 0 1" />
        <dynamics damping="0.0001" friction="0.0001"/> 
    </joint> 

    <link name="robot2">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${virtual_mass}"/>
            <inertia ixx="0.0001"  ixy="0"  ixz="0" iyy="0.0001" iyz="0" izz="0.0001" />
        </inertial> 
    </link>

    <joint name="offset_robot2" type="prismatic">
        <parent link="inertia_robot2"/>
        <child link="robot2"/>
        <origin xyz="0 -${robot_radius} 0" rpy="0 0 0"/>
        <axis xyz="0 0 1" />
        <limit lower="0" upper = "0.1" velocity = "0.1" effort = "1"/>
        <dynamics damping="0.0001" friction="0.0001"/> 
    </joint> 


    <gazebo>
        <self_collide>1</self_collide>
    </gazebo>

               

    <gazebo reference="anchor1">
        <material>Gazebo/White</material>
    </gazebo>
    <gazebo reference="anchor2">
        <material>Gazebo/White</material>
    </gazebo>

    <gazebo reference="anchor_robot1">
        <material>Gazebo/Black</material>
    </gazebo>
    <gazebo reference="anchor_robot2">
        <material>Gazebo/Black</material>
    </gazebo>

    <!-- <mu1 value="0.000001"/>
    <mu2 value="0.000001"/> -->

    <gazebo reference="load">
        <mu1 value="0.000001"/>
        <mu2 value="0.000001"/>
    </gazebo>

    <gazebo reference="inertia_robot1">
        <mu1 value="0.000001"/>
        <mu2 value="0.000001"/>
    </gazebo>

    <gazebo reference="inertia_robot2">
        <mu1 value="0.000001"/>
        <mu2 value="0.000001"/>
    </gazebo>

    <gazebo reference="robot1">
        <mu1 value="0.000001"/>
        <mu2 value="0.000001"/>
    </gazebo>

    <gazebo reference="robot2">
        <mu1 value="0.000001"/>
        <mu2 value="0.000001"/>
    </gazebo>

    <!-- gazebo plugin for truth pose of robots -->
    <gazebo>
        <plugin name="base_link" filename="libgazebo_ros_p3d.so">
        <ros>
          <namespace>/load</namespace>
          <remapping>odom:=pose</remapping>
        </ros>
            <frame_name>world</frame_name>
            <body_name>base_link</body_name>
            <update_rate>50.0</update_rate>
            <xyz_offset>0 0 0</xyz_offset>
            <rpy_offset>0 0 0</rpy_offset>
        </plugin>
    </gazebo>

    <gazebo>
        <plugin name="robot1_pose" filename="libgazebo_ros_p3d.so">
        <ros>
          <namespace>/robot1</namespace>
          <remapping>odom:=pose</remapping>
        </ros>
            <frame_name>world</frame_name>
            <body_name>robot1</body_name>
            <update_rate>50.0</update_rate>
            <xyz_offset>0 0 0</xyz_offset>
            <rpy_offset>0 0 0</rpy_offset>
        </plugin>
    </gazebo>


    <gazebo>
        <plugin name="robot2_pose" filename="libgazebo_ros_p3d.so">
        <ros>
          <namespace>/robot2</namespace>
          <remapping>odom:=pose</remapping>
        </ros>
            <frame_name>world</frame_name>
            <body_name>robot2</body_name>
            <update_rate>50.0</update_rate>
            <xyz_offset>0 0 0</xyz_offset>
            <rpy_offset>0 0 0</rpy_offset>
        </plugin>
    </gazebo>

    <!-- gazebo plugin for applying force to body frame -->
    <gazebo>
        <plugin name="gazebo_ros_force" filename="libgazebo_ros_force.so">
        <ros>
          <namespace>/load</namespace>
          <remapping>gazebo_ros_force:=wrench</remapping>
        </ros>
            <!-- Name of link within model which will receive the force -->
            <link_name>base_link</link_name>
            <!-- Frame where the force/torque will be applied (options: world; link)-->
            <force_frame>link</force_frame>
        </plugin>
    </gazebo>

    <gazebo>
        <plugin name="gazebo_ros_force" filename="libgazebo_ros_force.so">
        <ros>
          <namespace>/robot1</namespace>
          <remapping>gazebo_ros_force:=wrench</remapping>
        </ros>
            <!-- Name of link within model which will receive the force -->
            <link_name>robot1</link_name>
            <!-- Frame where the force/torque will be applied (options: world; link)-->
            <force_frame>link</force_frame>
            <!-- <update_rate>1</update_rate>  -->
        </plugin>
    </gazebo>

    <gazebo>
        <plugin name="gazebo_ros_force" filename="libgazebo_ros_force.so">
        <ros>
          <namespace>/robot2</namespace>
          <remapping>gazebo_ros_force:=wrench</remapping>
        </ros>
            <!-- Name of link within model which will receive the force -->
            <link_name>robot2</link_name>
            <!-- Frame where the force/torque will be applied (options: world; link)-->
            <force_frame>link</force_frame>
        </plugin>
    </gazebo>

    <!-- gazebo plugin to get joint position -->
    <gazebo>
        <plugin name="JointStatePublisher" filename="libgazebo_ros_joint_state_publisher.so">
            <!-- <publish_selected_only>true</publish_selected_only> -->
            <update_rate>30</update_rate>
            <joint_name>anchor1_joint</joint_name>
            <joint_name>anchor2_joint</joint_name>
        </plugin> 
    </gazebo>

    <!-- gazebo plugin to set initial joint position (cable length) -->
    <gazebo>
        <plugin name="gazebo_ros_joint_pose_trajectory" filename="libgazebo_ros_joint_pose_trajectory.so">
            <update_rate>30</update_rate>
        </plugin>
    </gazebo>




</robot>